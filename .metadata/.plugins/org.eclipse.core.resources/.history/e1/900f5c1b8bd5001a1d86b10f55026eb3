package com.innoventes.user.services.controller;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.ayusha.json.utils.JSONConverter;
import com.ayusha.services.common.exceptions.DataPersistenceOperationException;
import com.ayusha.services.common.exceptions.InvalidServiceRequestException;
import com.ayusha.services.common.exceptions.ResourceNotFoundException;
import com.ayusha.services.common.exceptions.ServiceRequestProcessor;
import com.ayusha.user.data.models.EmployeeDataModel;
import com.custom.logger.logging.Logger;
import com.custom.logger.manager.LogManager;
import com.innoventes.user.service.IAddressService;
import com.innoventes.user.service.IEmployeeService;
import com.innoventes.user.services.entity.AddressEntity;
import com.innoventes.user.services.entity.EmployeeEntity;

@RestController
@RequestMapping("/address")
@Validated
public class AddressController extends ServiceRequestProcessor {
	
	
	/** Logger **/
	private static Logger LOG = LogManager.getLogger(AddressController.class);
	
	/** service **/
	@Autowired
	private IAddressService iAddressService;
	

	/**
	 * post address create controller
	 * 
	 */
	@RequestMapping(value = "/add", method = RequestMethod.POST)
	public String addEmp(@Valid @RequestBody AddressEntity requestBody, HttpServletRequest httpServletRequest,
			HttpServletResponse httpServletResponse) throws  DataPersistenceOperationException,Exception,InvalidServiceRequestException,ResourceNotFoundException {
		LOG.info("entered address notes creation - start");
	
		ResponseEntity<Map<String, String>> response = iAddressService.saveAdd(requestBody);
		LOG.info("successfully created  operation ");
		return JSONConverter.convertPOJOToString(response);

	}
	
	
	/**
	 * get all address list controller
	 * 
	 */
	@RequestMapping(value = "/getAll", method = RequestMethod.GET)
    public Page<AddressEntity> getAllHr(HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) throws DataPersistenceOperationException,Exception,InvalidServiceRequestException,ResourceNotFoundException{
		LOG.info("entered address notes details - start");
		return iAddressService.getAllEmp();
	}
	
	

	/**
	 * get one adress controller
	 * 
	 * 
	 */
	@RequestMapping(value = "/Ad_get", method = RequestMethod.GET)
	public String getHr(@RequestParam("eId") String id,HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) throws DataPersistenceOperationException,Exception,InvalidServiceRequestException,ResourceNotFoundException{
		LOG.info("entered address notes fetch - start");
		return JSONConverter.convertPOJOToString(iAddressService.getEmp(id));
	}
	
	
	/**
	 * update employee controller
	 * 
	 */
	@RequestMapping(value = "/Ad_update", method = RequestMethod.PUT)
	public String updateUser(@Valid @RequestBody String requestBody,HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse) throws DataPersistenceOperationException,Exception,InvalidServiceRequestException,ResourceNotFoundException{
		LOG.info("entered address notes updation - start");
		EmployeeDataModel employeeDataModel = null;
		
		String strRequestBody = preProcess(requestBody,httpServletRequest,httpServletResponse);
		strRequestBody = postProcess(requestBody,httpServletRequest,httpServletResponse);
		LOG.info("post process body"+strRequestBody);
		employeeDataModel = (EmployeeDataModel) JSONConverter.convertStringToPOJO(requestBody, EmployeeDataModel.class);
		
		
		LOG.info("successfully updated  operation ");
		return JSONConverter.convertPOJOToString(iAddressService.updateEmp(employeeDataModel));
	}
	
	
	/**
	 * error field validation
	 * 
	 * 
	 */
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public Map<String, String> handleMethodArgumentNotValid(MethodArgumentNotValidException ex) {
		Map<String, String> errors = new HashMap<>();

		ex.getBindingResult().getFieldErrors().forEach(error -> 
			errors.put(error.getField(), error.getDefaultMessage()));
		
		return errors;
	}
	
	
	
	/**
	 * server error
	 * 
	 * 
	 */
	@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
	@ExceptionHandler(ConstraintViolationException.class)
	public Map<String, String> handleConstraintViolation(ConstraintViolationException ex) {
		Map<String, String> errors = new HashMap<>();
		
		ex.getConstraintViolations().forEach(cv -> {
			errors.put("message", cv.getMessage());
			errors.put("path", (cv.getPropertyPath()).toString());
		});	

		return errors;
	}	


}
